---
name: unittest
on: [push, pull_request]

jobs:
  unittest:
    name: "${{ matrix.generator }} ${{ matrix.toolset }} Boost ${{ matrix.boost_version }} ${{ matrix.build_type }} ${{ matrix.name_args }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        boost_version: ["1.75.0", "1.76.0", "1.77.0", "1.78.0", "1.79.0"]
        os: [windows-2019, windows-2022]
        toolset: [v141, v142, v143, ClangCL]
        build_type: [Debug, Release]
        generator: ["Visual Studio 16 2019", "Visual Studio 17 2022"]
        config_args: [""]
        build_args: [""]
        name_args: [""]
        exclude:
          - { os: windows-2019, toolset: v143 }
          - { os: windows-2022, toolset: v141 }
          - { os: windows-2019, generator: "Visual Studio 17 2022" }
          - { os: windows-2022, generator: "Visual Studio 16 2019" }
          - { toolset: ClangCL, build_type: Release }
        include:
          - boost_version: "1.79.0"
            os: windows-2022
            toolset: v143
            build_type: Debug
            generator: "Visual Studio 17 2022"
            config_args: ""
            build_args: "-- -p:CharacterSet=Unicode"
            name_args: "Unicode"
          - boost_version: "1.79.0"
            os: windows-2022
            toolset: v143
            build_type: Debug
            generator: "Visual Studio 17 2022"
            config_args: "-A Win32 -DENABLE_TESTING:BOOL=OFF"
            name_args: "32 bit"
          - boost_version: "1.79.0"
            os: windows-2019
            toolset: ""
            build_type: ""
            generator: "MinGW Makefiles"
            config_args: ""
            name_args: ""

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Boost
      uses: MarkusJx/install-boost@v2.3.0
      id: install-boost
      with:
        boost_version: ${{ matrix.boost_version }}
        platform_version: 2019
        arch: null

    - name: Add boost path to environment
      run: echo BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }} >> $env:GITHUB_ENV

    - name: Install packages
      run: cinst openssl

    - name: Create build directory
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake -T "${{matrix.toolset}}" \
              -G "${{matrix.generator}}" \
              ${{matrix.config_args}} \
              $GITHUB_WORKSPACE

    - name: Add build type configuration to environment
      if: matrix.generator != 'MinGW Makefiles'
      run: echo BUILD_CONFIG_ARG="--config ${{matrix.build_type}}" >> $env:GITHUB_ENV

    - name: Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake --build . \
        -j \
        ${BUILD_CONFIG_ARG} \
        ${{matrix.build_args}}

    - name: Add test type configuration to environment
      if: matrix.generator != 'MinGW Makefiles'
      run: echo TEST_CONFIG_ARG="-C ${{matrix.build_type}}" >> $env:GITHUB_ENV

    - name: Run tests
      working-directory: ${{runner.workspace}}/build
      run: ctest ${TEST_CONFIG_ARG} -V
      env:
        CTEST_OUTPUT_ON_FAILURE: True
